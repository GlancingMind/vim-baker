*baker.txt*         Better `:make`!
*baker*

Select some targets of a makefile via a convenient completion system and `:make`
them.

================================================================================
CONTENTS                                                      *Baker-Contents*

                    1.  Usage....................|Baker-Usage|
                    2.  Commands..............|Baker-Commands|
                    3.  Mappings..............|Baker-Mappings|
                    4.  Settings..............|Baker-Settings|
                    5.  Good to know........|Baker-GoodToKnow|
                    6.  Contribute..........|Baker-Contribute|

================================================================================
USAGE                                                            *Baker-Usage*

Invoke the `:Baker` command with the arguments as stated in `:Baker`.
After that, {makeprg} will be set and you can call `:make` or `:Baker`
without any argument. Unless you have the need to select a different makefile
or target.

================================================================================
COMMANDS                                                      *Baker-Commands*

                                                                      *:Baker*
:Baker[!]  [args]       Set {makeprg} with targets from given makefile
                        and run `:make`. [args] are optional. When [args] is
                        empty `:make` will be invoked without arguments.
                        Otherwise [args] must be of below form:
                            {makefile} {target1} {target2} ...
                        {makefile} is the path to a makefile.
                        {target} is a target in the given {makefile}.
                        Selection of makefile and targets will be assisted by
                        the completion system.
                        When [!] is given call `:make`! instead of `:make`

                                                            *:BakerClearCache*
:BakerClearCache        Empties the makefile cache.

                                                            *:BakerEditMakefile*
:BakerEditMakefile      Edit the selected makefile. The selection will be
                        assisted by the completion system.

================================================================================
MAPPINGS                                                      *Baker-Mappings*

There are no mappings in this plugin. But you might add one to your local
|vimrc|. I for example use the following maps:
                nnoremap    <c-m>       :Baker <C-L><C-L><C-D>

<C-L> match first entry if only one is present. See |c_CTRL-L| for more info.
<C-D> show all possible completions. Checkout |c_CTRL-D|.
NOTE: Pressing <c-m> might be the same as pressing <CR>.
NOTE: If you experience some cryptic output after running `:Baker` read
      the |Baker-GoodToKnow| section.

================================================================================
SETTINGS                                                      *Baker-Settings*

Variables
---------

This plugin introduces following global variables to alter some behaviour.

                                                      *g:Baker_MakefileGlobes*
`g:Baker_MakefileGlobes` is a list of globes for makefiles, which the plugin
uses to filter makefiles from unrelated files.
Default is ['GNUmakefile', 'makefile', 'Makefile'].~

                                                  *g:Baker_MakefileLookupPath*
`g:Baker_MakefileLookupPath` shall be a path to an existing directory or file.
If it's a directory, the completion will look in this directory to complete
makefiles. If it's a file, this file will be automaticaly completed.
Default is './', indicating the current directory.~

                                                 *g:Baker_CompleteDirectories*
`g:Baker_CompleteDirectories` is a boolean and indicates if directories shall
be completed by the completion. 0 for no completion. 1 to complete
directories.
Default is 1.~

Augroup
-------

This plugin introduces following augroup.

                                           *Baker_UpdateCacheOnMakefileChange*
`Baker_UpdateCacheOnMakefileChange` reparses a makefile and update the
corresponding entry in the cache. Can be disabled via
`:autocmd! Baker_UpdateCacheOnMakefileChange`
Default is active.~

================================================================================
GOOD TO KNOW                                                *Baker-GoodToKnow*

Garbage, Cryptic or no output after calling :Baker
--------------------------------------------------

Solution: Use `:Baker!` instead wich prevents Vim from jumping to the first
error.

Description: Garbage, cryptic or no output might happen when Vim parses the
output text of `:make` for errors to populate the quickfixlist but either
can't find or detects some text wrongly as errors. After detecting these
false positives, Vim tries to jump to the first error. This behaivour stems
from `:make` which `:Baker` invokes internally.

The Cache
---------

The completion must parse the selected makefile to suggest the makefiles
targets. In order to not parse makefiles over and over again, parsed
makefiles will be cached. When targets in a makefile are removed or added,
the cache might need to be cleared via |:BakerClearCache| to pickup the
changes.

================================================================================
CONTRIBUTE                                                  *Baker-Contribute*

Grab the latest version or report a bug on GitHub:

http://github.com/UnhinchedMind/vim-baker

vim:tw=78:ts=8:ft=help:norl:
